// Generated by CoffeeScript 1.6.3
var Vertex, makeVerticiesIntoLinkedList, setVertexChildReferences;

Vertex = (function() {
  function Vertex(name, content, children, remain_after_click, next) {
    this.name = name;
    this.content = content;
    this.children = children != null ? children : [[]];
    this.remain_after_click = remain_after_click != null ? remain_after_click : false;
    this.next = next;
    this.tree_edge;
    this.forward_edge;
    this.back_edge;
    this.cross_edge;
  }

  Vertex.prototype.unlink = function() {
    var current_next, current_previous;
    console.log('unlink called');
    current_previous = this.previous;
    current_next = this.next;
    if (this.previous != null) {
      current_previous.next = this.current_next;
    }
    if (this.next != null) {
      current_next.previous = this.current_previous;
    }
    this.next = null;
    return this.previous = null;
  };

  return Vertex;

})();

setVertexChildReferences = function(key) {
  var child, child_index, children, set_index, _results;
  children = verticies[key].children;
  set_index = 0;
  _results = [];
  while (set_index < children.length) {
    child_index = 0;
    while (child_index < children[set_index].length) {
      child = children[set_index][child_index];
      children[set_index][child_index] = verticies[child];
      child_index += 1;
    }
    _results.push(set_index += 1);
  }
  return _results;
};

makeVerticiesIntoLinkedList = function(start_key) {
  var current_vertex, next_key, next_vertex_available, previous_vertex;
  next_vertex_available = true;
  previous_vertex = null;
  current_vertex = verticies[start_key];
  while (next_vertex_available) {
    next_key = current_vertex.next;
    if (next_key != null) {
      current_vertex.next = verticies[next_key];
      current_vertex.previous = previous_vertex;
      previous_vertex = current_vertex;
      current_vertex = verticies[next_key];
    } else {
      next_vertex_available = false;
    }
  }
  return null;
};

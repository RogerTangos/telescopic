// Generated by CoffeeScript 1.6.3
test('vertex sets child references on command', function() {
  var badVertexBMod;
  telescopicText.reset();
  makeTestVerticies();
  vertexA.setChildrenReferences();
  equal(vertexA.getChildren()[0][0], vertexC);
  equal(vertexA.getChildren()[0][1], vertexB);
  equal(vertexA.getChildren()[1], void 0);
  badVertexBMod = telescopicText.vertex({
    _name: 'B',
    content: 'b',
    _children: [['C', 'noSuchKey', 'K']],
    _remainAfterClick: false,
    _next: 'D',
    _graph: 'graph1',
    _starter: false
  });
  badVertexBMod.setChildrenReferences();
  return equal(badVertexBMod.getChildren()[0][1], vertexK);
});

test('Graph.graph1.setReferencesForChildrenThroughoutGraph sets all child references', function() {
  telescopicText.reset();
  makeTestVerticies().setReferencesForChildrenThroughoutGraph();
  equal(1, 1);
  equal(vertexA.getChildren()[0][0], vertexC);
  equal(vertexA.getChildren()[0][1], vertexB);
  equal(vertexB.getChildren()[0][0], vertexC);
  equal(vertexB.getChildren()[0][1], vertexK);
  equal(vertexC.getChildren()[0][0], vertexA);
  equal(vertexC.getChildren()[0][1], vertexF);
  return equal(vertexC.getChildren()[1][0], vertexL);
});

test('telescopicText.Graph link', function() {
  var graph1;
  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  equal(vertexA.getNext(), vertexB);
  equal(vertexB.getPrevious(), vertexA);
  telescopicText.graph.link(vertexB, vertexC);
  equal(vertexB.getNext(), vertexC);
  return equal(vertexC.getPrevious(), vertexB);
});

test('telescopicText.graph dangerousUnlink', function() {
  var graph1;
  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  /* unlink between nodes*/

  telescopicText.graph.dangerousUnlink(vertexB);
  equal(vertexB.getNext(), null);
  equal(vertexB.getPrevious(), null);
  equal(vertexA.getNext(), null);
  equal(vertexC.getPrevious(), null);
  /* unlink end node*/

  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  vertexA.setPrevious(null);
  vertexC.setNext(null);
  telescopicText.graph.dangerousUnlink(vertexC);
  equal(vertexC.getNext(), null);
  equal(vertexC.getPrevious(), null);
  equal(vertexB.getNext(), null);
  equal(vertexB.getPrevious(), vertexA);
  /* unlink start node*/

  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  vertexA.setPrevious(null);
  vertexC.setNext(null);
  telescopicText.graph.dangerousUnlink(vertexA);
  equal(vertexA.getNext(), null);
  equal(vertexA.getPrevious(), null);
  equal(vertexB.getNext(), vertexC);
  return equal(vertexB.getPrevious(), null);
});

test('telescopicText.Graph safeUnlink', function() {
  /* unlink middle node*/

  var graph1;
  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  vertexA.setPrevious(null);
  vertexC.setNext(null);
  telescopicText.graph.safeUnlink(vertexB);
  equal(vertexB.getNext(), null);
  equal(vertexB.getPrevious(), null);
  equal(vertexA.getNext(), vertexC);
  equal(vertexC.getPrevious(), vertexA);
  /* unlink end node*/

  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  vertexA.setPrevious(null);
  vertexC.setNext(null);
  telescopicText.graph.safeUnlink(vertexC);
  equal(vertexC.getNext(), null);
  equal(vertexC.getPrevious(), null);
  equal(vertexB.getNext(), null);
  equal(vertexB.getPrevious(), vertexA);
  /* unlink start node*/

  telescopicText.reset();
  graph1 = makeTestVerticies();
  telescopicText.graph.link(vertexA, vertexB);
  telescopicText.graph.link(vertexB, vertexC);
  vertexA.setPrevious(null);
  vertexC.setNext(null);
  telescopicText.graph.safeUnlink(vertexA);
  equal(vertexA.getNext(), null);
  equal(vertexA.getPrevious(), null);
  equal(vertexB.getNext(), vertexC);
  return equal(vertexB.getPrevious(), null);
});

test('telescopicText.graph makeLinkedList', function() {
  /* happy path (one starting node supplied)*/

  var graph1;
  telescopicText.reset();
  graph1 = makeTestVerticies();
  vertexA.setNext('B');
  vertexB.setNext('C');
  vertexC.setNext(null);
  graph1.makeLinkedList(vertexA);
  equal(vertexA.getNext(), vertexB);
  equal(vertexB.getNext(), vertexC);
  equal(vertexC.getNext(), null);
  equal(vertexA.getPrevious(), null);
  equal(vertexB.getPrevious(), vertexA);
  equal(vertexC.getPrevious(), vertexB);
  /* Sad path - infinite unary loop*/

  telescopicText.reset();
  telescopicText.reset();
  graph1 = makeTestVerticies();
  vertexA.setNext('A');
  graph1.makeLinkedList(vertexA);
  equal(vertexA.getNext(), null);
  equal(vertexA.getPrevious(), null);
  /* Sad path - infinite long loop*/

  telescopicText.reset();
  telescopicText.reset();
  graph1 = makeTestVerticies();
  vertexA.setNext('B');
  vertexB.setNext('C');
  vertexC.setNext('A');
  graph1.makeLinkedList(vertexA);
  equal(vertexC.getNext(), null);
  equal(vertexA.getPrevious(), null);
  return equal(vertexA.getNext(), vertexB);
});
